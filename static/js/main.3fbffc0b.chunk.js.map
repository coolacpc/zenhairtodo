{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuidv4","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAqCeA,MAjCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJY,mBACpBC,EADoB,KACdC,EADc,KAmB3B,OACI,0BAAMC,UAAU,YAAYC,SATpC,SAAsBC,GAClBA,EAAEC,iBACCL,EAAKF,KAAKQ,SACTX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,iBAEvBN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,SAKrB,kBAACU,EAAA,EAAD,CACIC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAnBhB,SAA+BT,GAC3BH,EAAQ,2BAAID,GAAL,IAAWF,KAAMM,EAAEU,OAAOF,YAoBzB,kBAACG,EAAA,EAAD,CAAQJ,KAAK,UAAb,Y,qDCDGK,MA3Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAWlC,OACI,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,SACxB,kBAACC,EAAA,EAAD,CAAUC,QAASvB,EAAKD,UAAWyB,QAZ3C,WACIP,EAAejB,EAAKH,OAYhB,kBAAC4B,EAAA,EAAD,CACIC,QAAQ,QACRN,MAAO,CACHO,eAAgB3B,EAAKD,UAAY,eAAiB,OAGrDC,EAAKF,MAEV,kBAAC8B,EAAA,EAAD,CAAYJ,QAjBpB,WACIN,EAAWlB,EAAKH,MAgB4B,kBAAC,IAAD,SCZrCgC,MAVf,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACvC,OACG,kBAACa,EAAA,EAAD,KACKD,EAAME,KAAI,SAAAhC,GAAI,OACX,kBAAC,EAAD,CAAMiC,IAAKjC,EAAKH,GAAIG,KAAMA,EAAMiB,eAAgBA,EAAgBC,WAAYA,SCgD5EgB,MA/Cf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACNkC,EADM,KACCK,EADD,KAoCb,OAjCAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QANvB,0BAOnBJ,GACDF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAbS,wBAakBJ,KAAKK,UAAUb,MACtD,CAACA,IAyBF,yBAAK5B,UAAU,OACb,kBAACuB,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAMlB,QAAQ,MAA5C,0BAGA,kBAAC,EAAD,CAAU/B,QA3Bd,SAAiBK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA2BjB,kBAAC,EAAD,CAAUA,MAAOA,EAAOb,eAxB5B,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAIA,EAAKH,KAAOA,EACd,2BACKG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAe+CkB,WAV5D,SAAoBrB,GAClBsC,EAASL,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKH,KAAOA,WC9B1BiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3fbffc0b.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\nfunction handleTaskInputChange(e){\r\n    setTodo({...todo, task: e.target.value });\r\n}\r\n\r\nfunction handleSubmit(e) {\r\n    e.preventDefault();\r\n    if(todo.task.trim()) {\r\n        addTodo({ ...todo, id: uuidv4() });\r\n        // Rest task input\r\n        setTodo({ ...todo, task: \"\" });\r\n    }\r\n}\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <TextField\r\n                label=\"Task\" \r\n                name=\"task\"\r\n                type=\"text\"\r\n                value={todo.task}\r\n                onChange={handleTaskInputChange}\r\n            />\r\n            <Button type=\"submit\">Submit</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React from \"react\";\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n    function handleCheckboxClick() {\r\n        toggleComplete(todo.id);\r\n    }\r\n\r\n    function handleRemoveClick() {\r\n        removeTodo(todo.id);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <ListItem style={{ display: \"flex\" }}>\r\n            <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n            <Typography\r\n                variant=\"body1\"\r\n                style={{\r\n                    textDecoration: todo.completed ? \"line-through\" : null\r\n                }}\r\n            >\r\n                {todo.task}\r\n            </Typography>\r\n            <IconButton onClick={handleRemoveClick}><CloseIcon /></IconButton>\r\n        </ListItem>\r\n    );\r\n}\r\n\r\nexport default Todo;\r\n","import { List } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\r\n    return(\r\n       <List>\r\n           {todos.map(todo => (\r\n               <Todo key={todo.id} todo={todo} toggleComplete={toggleComplete} removeTodo={removeTodo}/>\r\n           ) )}\r\n       </List> \r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import Typography from \"@material-ui/core/Typography\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from './components/TodoList';\n\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if(storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return{\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography style={{ padding: 16 }} variant=\"h1\">\n        ZenHairStaff Todo List\n      </Typography>\n      <TodoForm addTodo={addTodo} />\n      <TodoList todos={todos} toggleComplete={toggleComplete} removeTodo={removeTodo}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}